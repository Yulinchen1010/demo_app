
  @override
  Widget build(BuildContext context) {
    if (_connecting) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('???Â§±Ê?Ôºö\n$_error'),
            const SizedBox(height: 12),
            FilledButton(
              onPressed: _connectAndListen,
              child: const Text('?çÊñ∞?óË©¶'),
            ),
          ],
        ),
      );
    }

    if (!_connected) {
      return const Center(child: Text('Â∞öÊú™????∞Ë?ÁΩ?));
    }
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (_spots.isEmpty)
            const Padding(
              padding: EdgeInsets.only(bottom: 16),
              child: Text('Á≠âÂ?Ë£ùÁΩÆË≥áÊ?‰∏≠‚Ä?),
            )
          else
            Padding(
              padding: const EdgeInsets.only(bottom: 12),
              child: Text(
                '?Ä??EMG RMSÔº?{_spots.last.y.toStringAsFixed(2)}' +
                    (_latestPct != null
                        ? ' (${_latestPct!.toStringAsFixed(1)}%)'
                        : ''),
                style: Theme.of(context).textTheme.titleMedium,
              ),
            ),
          Expanded(
            child:
                RegressionChart(series: Series(_spots), title: '?≥Ê? EMG RMS'),
          ),
          if (_latestJointAngles != null && _latestJointAngles!.isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '?Ä?∞È?ÁØÄËßíÂ∫¶',
                    style: Theme.of(context)
                        .textTheme
                        .titleMedium
                        ?.copyWith(fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 8),
                  ..._latestJointAngles!.map(
                    (m) => Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Text(
                        '${m.label}ÔºöÂ???${_formatAngle(m.vectorDegrees)}¬∞ÔºåÂ??ÉÊï∏=${_formatAngle(m.quaternionDegrees)}¬∞',
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    esp32.dispose();
    super.dispose();
  }
}

/// Page that lists historic predictions and shows the selected record.
class HistoryPage extends StatefulWidget {
  const HistoryPage({super.key});
  @override
  State<HistoryPage> createState() => _HistoryPageState();
}

class _HistoryPageState extends State<HistoryPage> {
  late Future<List<HistoryItem>> _indexFuture;
  Future<Series>? _seriesFuture;

  @override
  void initState() {
    super.initState();
    _indexFuture = CloudApi.fetchHistoryIndex();
    _indexFuture.then((list) {
      if (list.isNotEmpty) {
        _seriesFuture = CloudApi.fetchHistoryById(list.first.id);
        setState(() {});
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<HistoryItem>>(
      future: _indexFuture,
      builder: (ctx, snap) {
        if (snap.connectionState != ConnectionState.done) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snap.hasError) {
          return Center(child: Text('ËÆÄ?ñÊ≠∑?≤Ê??ÆÂ§±?óÔ?${snap.error}'));
        }
        final items = snap.data!;
        if (items.isEmpty) return const Center(child: Text('Ê≤íÊ?Á¥Ä??));
        return Column(
          children: [
            Expanded(
              child: FutureBuilder<Series>(
                future: _seriesFuture,
                builder: (ctx, s) {
                  if (s.connectionState != ConnectionState.done) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (s.hasError || s.data == null) {
                    return Center(child: Text('ËÆÄ?ñË©≤Ê¨°È?Ê∏¨Â§±?óÔ?${s.error}'));
                  }
                  return Padding(
                    padding: const EdgeInsets.all(16),
                    child:
                        RegressionChart(series: s.data!, title: 'Ê≠∑Âè≤Á¥Ä??),
                  );
                },
              ),
            ),
            SizedBox(
              height: 110,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: items.length,
                itemBuilder: (ctx, i) {
                  final it = items[i];
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        _seriesFuture = CloudApi.fetchHistoryById(it.id);
                      });
                    },
                    child: Card(
                      margin: const EdgeInsets.all(8),
                      child: Padding(
                        padding: const EdgeInsets.all(12),
                        child: Text(
                          it.date.toString().split(' ').first,
                          style: const TextStyle(fontSize: 14),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        );
      },
    );
  }
}
